// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package notification

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	// Notifies about transactions related to the wallet
	TransactionNotifications(ctx context.Context, in *TransactionNotificationsRequest, opts ...grpc.CallOption) (NotificationService_TransactionNotificationsClient, error)
	// Notifies about unspents related to the wallet's account
	UnspentsNotifications(ctx context.Context, in *UnspentsNotificationsRequest, opts ...grpc.CallOption) (NotificationService_UnspentsNotificationsClient, error)
	// Adds a webhook registered for some kind of event.
	AddWebhook(ctx context.Context, in *AddWebhookRequest, opts ...grpc.CallOption) (*AddWebhookReply, error)
	// Removes some previously added webhook.
	RemoveWebhook(ctx context.Context, in *RemoveWebhookRequest, opts ...grpc.CallOption) (*RemoveWebhookReply, error)
	// Returns registered webhooks
	ListWebhooks(ctx context.Context, in *ListWebhooksRequest, opts ...grpc.CallOption) (*ListWebhooksReply, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) TransactionNotifications(ctx context.Context, in *TransactionNotificationsRequest, opts ...grpc.CallOption) (NotificationService_TransactionNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotificationService_ServiceDesc.Streams[0], "/notification.NotificationService/TransactionNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationServiceTransactionNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotificationService_TransactionNotificationsClient interface {
	Recv() (*TransactionNotificationsReply, error)
	grpc.ClientStream
}

type notificationServiceTransactionNotificationsClient struct {
	grpc.ClientStream
}

func (x *notificationServiceTransactionNotificationsClient) Recv() (*TransactionNotificationsReply, error) {
	m := new(TransactionNotificationsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notificationServiceClient) UnspentsNotifications(ctx context.Context, in *UnspentsNotificationsRequest, opts ...grpc.CallOption) (NotificationService_UnspentsNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotificationService_ServiceDesc.Streams[1], "/notification.NotificationService/UnspentsNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationServiceUnspentsNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotificationService_UnspentsNotificationsClient interface {
	Recv() (*UnspentsNotificationsReply, error)
	grpc.ClientStream
}

type notificationServiceUnspentsNotificationsClient struct {
	grpc.ClientStream
}

func (x *notificationServiceUnspentsNotificationsClient) Recv() (*UnspentsNotificationsReply, error) {
	m := new(UnspentsNotificationsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notificationServiceClient) AddWebhook(ctx context.Context, in *AddWebhookRequest, opts ...grpc.CallOption) (*AddWebhookReply, error) {
	out := new(AddWebhookReply)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/AddWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) RemoveWebhook(ctx context.Context, in *RemoveWebhookRequest, opts ...grpc.CallOption) (*RemoveWebhookReply, error) {
	out := new(RemoveWebhookReply)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/RemoveWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) ListWebhooks(ctx context.Context, in *ListWebhooksRequest, opts ...grpc.CallOption) (*ListWebhooksReply, error) {
	out := new(ListWebhooksReply)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/ListWebhooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations should embed UnimplementedNotificationServiceServer
// for forward compatibility
type NotificationServiceServer interface {
	// Notifies about transactions related to the wallet
	TransactionNotifications(*TransactionNotificationsRequest, NotificationService_TransactionNotificationsServer) error
	// Notifies about unspents related to the wallet's account
	UnspentsNotifications(*UnspentsNotificationsRequest, NotificationService_UnspentsNotificationsServer) error
	// Adds a webhook registered for some kind of event.
	AddWebhook(context.Context, *AddWebhookRequest) (*AddWebhookReply, error)
	// Removes some previously added webhook.
	RemoveWebhook(context.Context, *RemoveWebhookRequest) (*RemoveWebhookReply, error)
	// Returns registered webhooks
	ListWebhooks(context.Context, *ListWebhooksRequest) (*ListWebhooksReply, error)
}

// UnimplementedNotificationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (UnimplementedNotificationServiceServer) TransactionNotifications(*TransactionNotificationsRequest, NotificationService_TransactionNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method TransactionNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) UnspentsNotifications(*UnspentsNotificationsRequest, NotificationService_UnspentsNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method UnspentsNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) AddWebhook(context.Context, *AddWebhookRequest) (*AddWebhookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWebhook not implemented")
}
func (UnimplementedNotificationServiceServer) RemoveWebhook(context.Context, *RemoveWebhookRequest) (*RemoveWebhookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWebhook not implemented")
}
func (UnimplementedNotificationServiceServer) ListWebhooks(context.Context, *ListWebhooksRequest) (*ListWebhooksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhooks not implemented")
}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_TransactionNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionNotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServiceServer).TransactionNotifications(m, &notificationServiceTransactionNotificationsServer{stream})
}

type NotificationService_TransactionNotificationsServer interface {
	Send(*TransactionNotificationsReply) error
	grpc.ServerStream
}

type notificationServiceTransactionNotificationsServer struct {
	grpc.ServerStream
}

func (x *notificationServiceTransactionNotificationsServer) Send(m *TransactionNotificationsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _NotificationService_UnspentsNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UnspentsNotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServiceServer).UnspentsNotifications(m, &notificationServiceUnspentsNotificationsServer{stream})
}

type NotificationService_UnspentsNotificationsServer interface {
	Send(*UnspentsNotificationsReply) error
	grpc.ServerStream
}

type notificationServiceUnspentsNotificationsServer struct {
	grpc.ServerStream
}

func (x *notificationServiceUnspentsNotificationsServer) Send(m *UnspentsNotificationsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _NotificationService_AddWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).AddWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/AddWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).AddWebhook(ctx, req.(*AddWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_RemoveWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).RemoveWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/RemoveWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).RemoveWebhook(ctx, req.(*RemoveWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_ListWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebhooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).ListWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/ListWebhooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).ListWebhooks(ctx, req.(*ListWebhooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddWebhook",
			Handler:    _NotificationService_AddWebhook_Handler,
		},
		{
			MethodName: "RemoveWebhook",
			Handler:    _NotificationService_RemoveWebhook_Handler,
		},
		{
			MethodName: "ListWebhooks",
			Handler:    _NotificationService_ListWebhooks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransactionNotifications",
			Handler:       _NotificationService_TransactionNotifications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UnspentsNotifications",
			Handler:       _NotificationService_UnspentsNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notification/notification.proto",
}
