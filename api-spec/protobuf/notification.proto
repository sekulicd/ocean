syntax = "proto3";
option go_package = "github.com/vulpemventures/wallet-elements/api-spec/protobuf/gen/notification";

/*
  NotificationService is used to notify interested parties about wallet events.
  It offers various options like streams that acts like websocket and webhooks where 3rd party would
  receive events in in direct http call.
 */
service NotificationService {
  //**************//
  //   STREAMS    //
  //**************//

  // Notifies about transactions related to the wallet
  rpc TransactionNotifications (TransactionNotificationsRequest) returns (stream TransactionNotificationsResponse);
  // Notifies about unspents related to the wallet's account
  rpc UnspentsNotifications (UnspentsNotificationsRequest) returns (stream UnspentsNotificationsResponse);

  //***************//
  //   WEBHOOKS    //
  //***************//

  // Adds a webhook registered for some kind of event.
  rpc AddWebhook(AddWebhookRequest) returns(AddWebhookReply){}

  // Removes some previously added webhook.
  rpc RemoveWebhook(RemoveWebhookRequest) returns(RemoveWebhookReply){}

  // Returns registered webhooks
  rpc ListWebhooks(ListWebhooksRequest) returns(ListWebhooksReply){}
}

message TransactionNotificationsRequest{}
message TransactionNotificationsResponse{
  // id of transaction
  string tx_id = 1;
  // tx event type
  enum TxEventType {
    // tx broadcasted
    BROADCASTED = 0;
    //tx confirmed
    CONFIRMED = 1;
  }
  TxEventType event_type = 2;
  // block details of the block that includes tx
  BlockDetails block_details = 3;
}
message BlockDetails {
  bytes hash = 1;
  int32 height = 2;
  int64 timestamp = 3;
}

message UnspentsNotificationsRequest{
  // Id of the account for which we want to track unspents, either id or name needs to be provided.
  int64 id = 1;
  // Id of the account for which we want to track unspents, either name or id needs to be provided.
  string name = 2;
}
message UnspentsNotificationsResponse{
    Unspents unspents = 1;
}
message Unspents {
  // Id of the account
  int64 id = 1;
  // Name of the account
  string name = 2;
  // list of unspents
  repeated Unspent unspent = 3;
}
message Unspent {
  // Tx id of the unspent
  string tx_id = 1;
  // Output index
  int64 index = 2;
  // Asset in bytes or asset_commitment if value is blinded
  bytes asset = 3;
  // Value in bytes or value_commitment if value is blinded
  bytes value = 4;
  // Script
  bytes script = 5;
  // Nonce
  bytes nonce = 6;
  // Range proof
  bytes rangeProof = 7;
  // Surjection proof
  bytes surjectionProof = 8;
}

enum EventType {
  // receive notification about transactions
  TRANSACTION = 0;
  // receive notifications about unspents
  UNSPENTS = 1;
}
message AddWebhookRequest {
  // The endpoint of the external service to reach.
  string endpoint = 1;
  // The event type for which the webhook should be registered.
  EventType action = 2;
  // The secret to use for signign a JWT token for an authenticated request
  // to the external service.
  string secret = 3;
}
message AddWebhookReply {
  // The id of the new webhook.
  string id = 1;
}

message RemoveWebhookRequest {
  // The id of the webhook to remove.
  string id = 1;
}
message RemoveWebhookReply {}

message ListWebhooksRequest {
  // The event type for which filtering the list of webhooks.
  EventType action = 1;
}
message ListWebhooksReply {
  // The list of info about the webhooks regitered for an action.
  repeated WebhookInfo webhook_info = 1;
}
message WebhookInfo {
  // The id of the webhook.
  string id = 1;
  // The endpoint of the external service to reach.
  string endpoint = 2;
  // Whether the outgoing requests are authenticated.
  bool is_secured = 3;
}
