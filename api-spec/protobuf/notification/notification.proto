syntax = "proto3";

package notification;

import "types/types.proto";

/*
  NotificationService is used to notify interested parties about wallet events.
  It offers various options like streams that acts like websocket and webhooks where 3rd party would
  receive events in in direct http call.
 */
service NotificationService {
  //**************//
  //   STREAMS    //
  //**************//

  // Notifies about transactions related to the wallet
  rpc TransactionNotifications(TransactionNotificationsRequest) returns (stream TransactionNotificationsReply);
  // Notifies about unspents related to the wallet's account
  rpc UnspentsNotifications(UnspentsNotificationsRequest) returns (stream UnspentsNotificationsReply);

  //***************//
  //   WEBHOOKS    //
  //***************//

  // Adds a webhook registered for some kind of event.
  rpc AddWebhook(AddWebhookRequest) returns(AddWebhookReply){}

  // Removes some previously added webhook.
  rpc RemoveWebhook(RemoveWebhookRequest) returns(RemoveWebhookReply){}

  // Returns registered webhooks
  rpc ListWebhooks(ListWebhooksRequest) returns(ListWebhooksReply){}
}

message TransactionNotificationsRequest{}
message TransactionNotificationsReply{
  // Txid of transaction.
  string txid = 1;
  // Tx event type.
  types.TxEventType event_type = 2;
  // Block details of the block that includes tx..
  BlockDetails block_details = 3;
}
message BlockDetails {
  bytes hash = 1;
  int32 height = 2;
  int64 timestamp = 3;
}

message UnspentsNotificationsRequest{
  // Id of the account for which we tracking unspents, either id or name needs to be provided.
  int64 id = 1;
  // Name of the account for which we tracking unspents, either name or id needs to be provided.
  string name = 2;
}
message UnspentsNotificationsReply{
  types.Unspents unspents = 1;
}
enum EventType {
  // Receive notification about transactions.
  TRANSACTION = 0;
  // Receive notifications about unspents.
  UNSPENTS = 1;
}
message AddWebhookRequest {
  // The endpoint of the external service to reach.
  string endpoint = 1;
  // The event type for which the webhook should be registered.
  EventType action = 2;
  // The secret to use for signign a JWT token for an authenticated request
  // to the external service.
  string secret = 3;
}
message AddWebhookReply {
  // The id of the new webhook.
  string id = 1;
}

message RemoveWebhookRequest {
  // The id of the webhook to remove.
  string id = 1;
}
message RemoveWebhookReply {}

message ListWebhooksRequest {
  // The event type for which filtering the list of webhooks.
  EventType action = 1;
}
message ListWebhooksReply {
  // The list of info about the webhooks regitered for an action.
  repeated WebhookInfo webhook_info = 1;
}
message WebhookInfo {
  // The id of the webhook.
  string id = 1;
  // The endpoint of the external service to reach.
  string endpoint = 2;
  // Whether the outgoing requests are authenticated.
  bool is_secured = 3;
}
