syntax = "proto3";
option go_package = "github.com/vulpemventures/wallet-elements/api-spec/protobuf/gen";

/*
  TransactionService is used to craft and sign various kind's of transactions.
 */
service TransactionService {
  // Returns fee cost of one byte in satoshi's
  rpc Fee (FeeRequest) returns (FeeResponse);

  // Updates fee cost of one byte
  rpc UpdateFee (UpdateFeeRequest) returns (UpdateFeeResponse);

  // Signs transaction hex
  rpc SignTransaction (SignTransactionRequest) returns (SignTransactionResponse);

  // Broadcast signed transaction
  rpc BroadcastTransaction (BroadcastTransactionRequest) returns (BroadcastTransactionResponse);

  // Creates unsigned, non-blinded psbt based on provided inputs and outputs
  rpc CreatePsbt (CreatePsbtRequest) returns (CreatePsbtResponse);

  // Blind unblinded psbt
  rpc BlindPsbt (BlindPsbtRequest) returns (BlindPsbtResponse);

  // Sign unsigned psbt
  rpc SignPsbt (SignPsbtRequest) returns (SignPsbtResponse);

  // Mint asset
  rpc Mint (MintRequest) returns (MintResponse);

  // ReMint asset
  rpc ReMint (ReMintRequest) returns (ReMintResponse);

  // Burn minted assets belongs to list of addresses
  rpc Burn (BurnRequest) returns (BurnResponse);

  // Transfer asset to one or more receivers
  rpc Transfer (TransferRequest) returns (TransferResponse);

  /*
   Returns information needed for claim pegin to move coins to the side-chain.
   The user should send coins from their Bitcoin wallet to the main-chain address returned.
   */
  rpc PegInAddress (PegInAddressRequest) returns (PegInAddressResponse);

  /*
    Claim coins from the main chain by creating a pegin transaction with the necessary metadata after the corresponding Bitcoin transaction.
    Note that the transaction will not be relayed unless it is buried at least 102 blocks deep.
   */
  rpc ClaimPegIn (ClaimPegInRequest) returns (ClaimPegInResponse);
}

message FeeRequest{}
message FeeResponse{
  // current cost of byte in satoshi's
  int64 sats_per_byte = 1;
}

message UpdateFeeRequest{
  // new cost of bye in satoshi's
  int64 sats_per_byte = 1;
}
message UpdateFeeResponse{}

message SignTransactionRequest{
  // transaction hex to be signed
  string tx_hex = 1;
}
message SignTransactionResponse{}

message BroadcastTransactionRequest{
  // transaction hex to be broadcast
  string tx_hex = 2;
}
message BroadcastTransactionResponse{}

message CreatePsbtRequest{
  // inputs(unspents) to be spent from, if no inputs are provided, daemon will select it
  repeated Input inputs = 1;
  // outputs spending inputs
  repeated Output outputs = 2;
}
message Input {
  // previous output tx id
  string prevout_tx_id = 1;
  // previous tx output index
  int64 index = 2;
}
message Output {
  // address to which money is sent
  string address = 1;
  // sent amount
  int64 amount = 2;
}
message CreatePsbtResponse{}

message BlindPsbtRequest{
  // unblinded psbt in base64 format
  string psbt = 1;
}
message BlindPsbtResponse{
  // blinded psbt in base64 format
  string psbt = 1;
}

message SignPsbtRequest{
  // unsigned psbt in base64 format
  string psbt = 1;
}
message SignPsbtResponse{
  // signed psbt in base64 format
  string psbt = 1;
}

message MintRequest{
  // asset amount to be minted
  uint64 asset_amount = 1;
  // token amount to be minted
  uint64 token_amount = 2;
  // minted asset name
  string asset_name = 3;
  // asset ticker
  string asset_ticker = 4;
  // asset domain
  string asset_domain = 5;
}
message MintResponse{
  // signed tx in base64 format
  string tx = 1;
}

message ReMintRequest{
  // asset to be re-minted
  string asset = 1;
  // asset amount to be re-minted
  uint64 asset_amount = 2;
}
message ReMintResponse{
  // signed tx in base64 format
  string tx = 1;
}

message BurnRequest{
  // asset to be burn
  string asset = 1;
  repeated string addresses = 2;
}
message BurnResponse{
  // signed tx in base64 format
  string tx = 1;
}

message TransferRequest{
  // asset to be transferred
  string asset = 1;
  // receivers to which specified amount is to be sent
  repeated Receiver receivers = 2;
}
message Receiver {
  // amount to be sent
  uint64 amount = 1;
  // address to which amount is to be sent
  string address = 2;
}
message TransferResponse{
  // signed tx in base64 format
  string tx = 1;
}

message PegInAddressRequest{}
message PegInAddressResponse{
  // main-chain deposit address to send bitcoin to
  string main_chain_address = 1;
  // claim script committed to by the main-chain address
  string claim_script = 2;
}

message ClaimPegInRequest{
  // The raw bitcoin transaction (in hex) depositing bitcoin to the main-chain address generated by PegInAddress
  string bitcoin_tx = 1;
  // A raw tx_out_proof (in hex) generated by the main-chain daemon's `gettxoutproof` containing a proof of only bitcoin_tx
  string tx_out_proof = 2;
  // The witness program generated by PegInAddress.
  string claim_script = 3;
}
message ClaimPegInResponse{
  // signed tx in base64 format
  string tx = 1;
}