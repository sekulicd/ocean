syntax = "proto3";

package transaction;

/*
  TransactionService is used to craft and sign various kind's of transactions.
 */
service TransactionService {
  // Returns fee cost of one byte in satoshi's.
  rpc Fee (FeeRequest) returns (FeeReply);

  // Updates fee cost of one byte.
  rpc UpdateFee (UpdateFeeRequest) returns (UpdateFeeReply);

  // Signs transaction hex.
  rpc SignTransaction (SignTransactionRequest) returns (SignTransactionReply);

  // Broadcast signed transaction.
  rpc BroadcastTransaction (BroadcastTransactionRequest) returns (BroadcastTransactionReply);

  // Creates unsigned, non-blinded psbt based on provided inputs and outputs.
  rpc CreatePsbt (CreatePsbtRequest) returns (CreatePsbtReply);

  // Blind unblinded psbt.
  rpc BlindPsbt (BlindPsbtRequest) returns (BlindPsbtReply);

  // Sign unsigned psbt.
  rpc SignPsbt (SignPsbtRequest) returns (SignPsbtReply);

  // Mint asset.
  rpc Mint (MintRequest) returns (MintReply);

  // ReMint asset.
  rpc ReMint (ReMintRequest) returns (ReMintReply);

  // Burn minted assets belongs to list of addresses.
  rpc Burn (BurnRequest) returns (BurnReply);

  // Transfer asset to one or more receivers.
  rpc Transfer (TransferRequest) returns (TransferReply);

  /*
   Returns information needed for claim pegin to move coins to the side-chain.
   The user should send coins from their Bitcoin wallet to the main-chain address returned.
   */
  rpc PegInAddress (PegInAddressRequest) returns (PegInAddressReply);

  /*
    Claim coins from the main chain by creating a pegin transaction with the necessary metadata after the corresponding Bitcoin transaction.
    Note that the transaction will not be relayed unless it is buried at least 102 blocks deep.
   */
  rpc ClaimPegIn (ClaimPegInRequest) returns (ClaimPegInReply);
}

message FeeRequest{}
message FeeReply{
  // Current cost of byte in satoshi's.
  int64 sats_per_byte = 1;
}

message UpdateFeeRequest{
  // New cost of bye in satoshi's.
  int64 sats_per_byte = 1;
}
message UpdateFeeReply{}

message SignTransactionRequest{
  // Transaction hex to be signed.
  string tx_hex = 1;
}
message SignTransactionReply{}

message BroadcastTransactionRequest{
  // Transaction hex to be broadcasted.
  string tx_hex = 2;
}
message BroadcastTransactionReply{}

message CreatePsbtRequest{
  // Unspents to spend to cover output amount. If no inputs are provided, they will be selected.
  repeated Input inputs = 1;
  // Outputs spending inputs.
  repeated Output outputs = 2;
}
message Input {
  // Previous output txid.
  string txid = 1;
  // Previous tx output index.
  int64 index = 2;
}
message Output {
  // Address to which money is sent.
  string address = 1;
  // Sent amount.
  int64 amount = 2;
  // Asset amount.
  string asset = 3;
}
message CreatePsbtReply{}

message BlindPsbtRequest{
  // Unblinded psbt in base64 format.
  string psbt = 1;
}
message BlindPsbtReply{
  // Blinded psbt in base64 format.
  string psbt = 1;
}

message SignPsbtRequest{
  // Unsigned psbt in base64 format.
  string psbt = 1;
}
message SignPsbtReply{
  // Signed psbt in base64 format.
  string psbt = 1;
}

message MintRequest{
  // Asset amount to be minted.
  uint64 asset_amount = 1;
  // Token amount to be minted.
  uint64 token_amount = 2;
  // Minted asset name.
  string asset_name = 3;
  // Asset ticker.
  string asset_ticker = 4;
  // Asset domain.
  string asset_domain = 5;
}
message MintReply{
  // Signed tx in hex format.
  string tx_hex = 1;
}

message ReMintRequest{
  // Asset to be re-minted.
  string asset = 1;
  // Asset amount to be re-minted.
  uint64 asset_amount = 2;
}
message ReMintReply{
  // Signed tx in hex format.
  string tx_hex = 1;
}

message BurnRequest{
  // Asset to be burn.
  string asset = 1;
  repeated string addresses = 2;
}
message BurnReply{
  // Signed tx in hex format.
  string tx_hex = 1;
}

message TransferRequest{
  // Asset to be transferred.
  string asset = 1;
  // Receivers to which specified amount is to be sent.
  repeated Receiver receivers = 2;
}
message Receiver {
  // Amount to be sent.
  uint64 amount = 1;
  // Address to which amount is to be sent.
  string address = 2;
}
message TransferReply{
  // Signed tx in hex format.
  string tx_hex = 1;
}

message PegInAddressRequest{}
message PegInAddressReply{
  // Main-chain deposit address to send bitcoin to.
  string main_chain_address = 1;
  // Claim script committed to by the main-chain address.
  string claim_script = 2;
}

message ClaimPegInRequest{
  // The raw bitcoin transaction (in hex) depositing bitcoin to the main-chain address generated by PegInAddress.
  string bitcoin_tx = 1;
  // A raw tx_out_proof (in hex) generated by the main-chain daemon's `gettxoutproof` containing a proof of only bitcoin_tx.
  string tx_out_proof = 2;
  // The witness program generated by PegInAddress.
  string claim_script = 3;
}
message ClaimPegInReply{
  // Signed tx in hex format.
  string tx_hex = 1;
}